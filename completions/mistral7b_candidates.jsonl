{"task_id": "codeeval-0", "solution": "def process_argument(func):\n    def wrapper(arg):\n        if isinstance(arg, str):\n            return func(arg.upper())\n        elif isinstance(arg, int):\n            return abs(arg)\n        else:\n            return None\n    return wrapper\n\n@process_argument\ndef foo(arg):\n    return arg"}
{"task_id": "codeeval-1", "solution": "import itertools as it\n\ndef cartesian_product(*iterables):\n    for tuple in it.product(*iterables):\n        yield tuple"}
{"task_id": "codeeval-2", "solution": "class User:\n    def __init__(self, name, handle):\n        self.name = name\n        self.handle = handle\n\n    def __eq__(self, other):\n        return self.handle == other.handle\n\n    def __ne__(self, other):\n        return self.handle!= other.handle\n\n    def __hash__(self):\n        return hash(self.handle)"}
{"task_id": "codeeval-3", "solution": "import random\n\ndef get_random_element(l,n=1):\n    if n==1:\n        return random.choice(l)\n    else:\n        return random.sample(l,n)"}
{"task_id": "codeeval-4", "solution": ""}
{"task_id": "codeeval-5", "solution": "def apply_to_list(func, lst):\n    return [func(x) for x in lst]"}
{"task_id": "codeeval-6", "solution": "class Vector3d:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __str__(self):\n        return '({}, {}, {})'.format(self.x, self.y, self.z)\n\n    def __add__(self, other):\n        return Vector3d(self.x + other.x, self.y + other.y, self.z + other.z)\n\n    def __sub__(self, other):\n        return Vector3d(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def __mul__(self, other):\n        return Vector3d(self.x * other, self.y * other, self.z * other)"}
{"task_id": "codeeval-7", "solution": "def process_list(x):\n    if type(x) is list:\n        if len(x) == 0:\n            return None\n        elif type(x[0]) is int:\n            return sum(x)\n        elif type(x[0]) is str:\n            return ''.join(x)\n    else:\n        return None"}
{"task_id": "codeeval-8", "solution": ""}
{"task_id": "codeeval-9", "solution": "def __iter__(self):\nreturn self\n\ndef __next__(self):\nif self.dice_1 == 6 and self.dice_2 == 6:\n    raise StopIteration()\nelse:\n    self.dice_1 = random.randint(1, 6)\n    self.dice_2 = random.randint(1, 6)\n    return (self.dice_1, self.dice_2)\n\ndef __str__(self):\nreturn str(self.dice_1) +'' + str(self.dice_2)"}
{"task_id": "codeeval-10", "solution": ""}
{"task_id": "codeeval-11", "solution": "class MyClass(object):\n    def __init__(self, v):\n        self.v = v\n\n    def __eq__(self, other):\n        return self is other"}
{"task_id": "codeeval-12", "solution": ""}
{"task_id": "codeeval-13", "solution": "def count_elements(L):\n    frequency_count = {}\n    for e in L:\n        if e not in frequency_count:\n            frequency_count[e] = 1\n        else:\n            frequency_count[e] += 1\n    return frequency_count"}
{"task_id": "codeeval-14", "solution": ""}
{"task_id": "codeeval-15", "solution": "class MyClass(object): \n    def__init__(self): \n        self._private_var = 0 \n    \n    def__setattr__(self, key, value): \n        if key == '_private_var': \n            raise AttributeError('private attribute') \n        else: self.__dict__[key] = value\n\n    def__getattr__(self, key): \n        if key == '_private_var': \n            raise AttributeError('private attribute') \n        else: \n            return self.__dict__[key] \n    @property \n    def private_var(self): \n        return self._private_var"}
{"task_id": "codeeval-16", "solution": "class MyClass:\n    location = 'unknown'"}
{"task_id": "codeeval-17", "solution": "def remove_last_two_items(l):\n    # Create a copy of the given list\n    new_list = l[:]\n    # Remove the last two items from the copy\n    del new_list[-2:]\n    # Return the new list\n    return new_list"}
{"task_id": "codeeval-18", "solution": "import sys\n\nclass MyClass(object):\n\n    def __init__(self, *args):\n        self._args = args\n\n    def __iter__(self):\n        for arg in self._args:\n            yield arg\n\n    def __getitem__(self, index):\n        return self._args[index]"}
{"task_id": "codeeval-19", "solution": "class Sentence:\n    def __init__(self,sentence):\n        self.sentence=sentence\n\n    def __iter__(self):\n        self.index = 0\n        return self\n\n    def __next__(self):\n        if self.index < len(self.sentence):\n            word = self.sentence[self.index]\n            self.index += 1\n            return word\n        else:\n            raise StopIteration"}
{"task_id": "codeeval-20", "solution": "class Vector3d:\n    \"\"\"Represent a three-dimensional vector.\n\n    Attributes:\n        x: component along the x axis\n        y: component along the y axis\n        z: component along the z axis\n    \"\"\"\n\n    @classmethod\n    def from_json(cls, vector_json):\n        \"\"\"\n        Parse a JSON string and instantiate a Vector3d instance.\n\n        Args:\n            vector_json (str): JSON string.\n\n        Returns:\n            Vector3d: A Vector3d instance.\n        \"\"\"\n        if not inspect.isclass(cls):\n            raise TypeError(\"Class must be a class!\")\n\n        # Parsing JSON\n        vector_json_dict = json.loads(vector_json)\n        # OrderedDict is not ordered in python3.7+\n        if not isinstance(vector_json_dict, OrderedDict):\n            raise TypeError(\"JSON must be an OrderedDict!\")\n        # Check the keys of the OrderedDict are x, y and z\n        for key in vector_json_dict.keys():\n            if key not in ['x', 'y', 'z']:\n                raise ValueError(\"JSON must have keys x, y and z!\")\n\n        # Parsing the OrderedDict\n        x = vector_json_dict['x']\n        y = vector_json_dict['y']\n        z = vector_json_dict['z']\n\n        return cls(x, y, z)\n\n    def __init__(self, x, y, z):\n        self.x"}
{"task_id": "codeeval-21", "solution": "class MyClass:\n    def __init__(self, a, b):\n        self.a, self.b = a, b\n    def __iter__(self):\n        return self\n    def __next__(self):\n        self.a = 5\n        return self.b\n    def next(self):\n        return self.__next__()"}
{"task_id": "codeeval-22", "solution": "def positional_keyword_args(a, b, c):\n    return a + b + c"}
{"task_id": "codeeval-23", "solution": "class Vector:\n    def __init__(self, iterable):\n        self.__data = list(iterable)\n\n    def __getitem__(self, index):\n        return self.__data[index]\n\n    def __setitem__(self, index, value):\n        self.__data[index] = value"}
{"task_id": "codeeval-24", "solution": "def find_common_elements(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements"}
{"task_id": "codeeval-25", "solution": "class MyABCClass(abc.ABC):\n    def my_abstract_method(self):\n        raise NotImplementedError()"}
{"task_id": "codeeval-26", "solution": "import time\n\ndef measure_runtime(func):\n    def wrapper(*args, **kwargs):\n        t1 = time.time()\n        result = func(*args, **kwargs)\n        t2 = time.time()\n        return (t2-t1, result)\n    return wrapper"}
{"task_id": "codeeval-27", "solution": "def sort_by_length(lst):\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        shortest_string = lst[0]\n        shortest_index = 0\n        for i in range(len(lst)):\n            if len(lst[i]) < len(shortest_string):\n                shortest_string = lst[i]\n                shortest_index = i\n        # print(shortest_index)\n        # print(shortest_string)\n        # print(lst)\n        lst[shortest_index] = lst.pop()\n        return sort_by_length(lst)"}
{"task_id": "codeeval-28", "solution": "from functools import partial\n\ndef multiply(a, b):\n    return a * b\n\ndouble = partial(multiply, b=2)"}
{"task_id": "codeeval-29", "solution": ""}
{"task_id": "codeeval-30", "solution": "def get_unicode_code_points(s):\n    # return a list of code points\n    pass"}
{"task_id": "codeeval-31", "solution": "def sort_descending(list):\n    return sorted(list, key=lambda x: x[::-1])"}
{"task_id": "codeeval-32", "solution": "class Vector:\n    def __init__(self, *args):\n        self.vals = args\n\n    def __getattr__(self, item):\n        return self.vals[0]\n\n    def __setattr__(self, key, value):\n        self.vals[0] = value"}
{"task_id": "codeeval-33", "solution": ""}
{"task_id": "codeeval-34", "solution": "def select_random_elements(n):\n    if n < 5:\n        raise ValueError('n must be greater than 5')\n\n    random_numbers = [random.randint(0, n) for _ in range(n)]\n    random_numbers = list(set(random_numbers))\n    random.shuffle(random_numbers)\n    return random_numbers"}
{"task_id": "codeeval-35", "solution": "examples:\n    >>> find_common_keys({'a': 1, 'b': 2}, {'c': 3, 'b': 2})\n    {'b'}\n\n    >>> find_common_keys({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5, 'b': 2})\n    {'b'}"}
{"task_id": "codeeval-36", "solution": ""}
{"task_id": "codeeval-37", "solution": ""}
{"task_id": "codeeval-38", "solution": ""}
{"task_id": "codeeval-39", "solution": "def add_list_to_tuple(lst, tup):\n    return tup + lst"}
{"task_id": "codeeval-40", "solution": "# Ex: list_to_string([1, 2, 3, 4]) # => \"1, 2, 3, 4\""}
{"task_id": "codeeval-41", "solution": "def sort_list(lst):\n    # Separate integers and strings\n    ints = [int(item) for item in lst if item.isdigit()]\n    strings = [item for item in lst if not item.isdigit()]\n\n    # Sort integers and strings separately\n    sorted_ints = sorted(ints)\n    sorted_strings = sorted(strings, reverse=True)\n\n    # Combine sorted integers and strings\n    sorted_lst = sorted_ints + sorted_strings\n\n    return sorted_lst"}
{"task_id": "codeeval-42", "solution": "class Vector3d:\n\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __eq__(self, other):\n        if (self.x == other.x) and (self.y == other.y) and (self.z == other.z):\n            return True\n        else:\n            return False\n\n    def rotate(self, angle):\n        new_x = self.x * math.cos(angle) + self.y * math.sin(angle)\n        new_y = -self.x * math.sin(angle) + self.y * math.cos(angle)\n        new_z = self.z\n        return Vector3d(new_x, new_y, new_z)"}
{"task_id": "codeeval-43", "solution": "class Sentence:\n    def __init__(self, s):\n        self.s = s\n\n    def __getitem__(self, idx):\n        if isinstance(idx, int):\n            return self.s[idx]\n        elif isinstance(idx, slice):\n            start = idx.start if idx.start else 0\n            end = idx.stop if idx.stop else len(self.s)\n            if idx.step is None:\n                return self.s[start: end]\n            else:\n                return self.s[start: end: idx.step]\n        else:\n            return 'Invalid Index'"}
{"task_id": "codeeval-44", "solution": ""}
{"task_id": "codeeval-45", "solution": "class Vector3d:\n\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __format__(self):\n        return f'({self.x:.2f}: {self.y:.2f}: {self.z:.2f})'"}
{"task_id": "codeeval-46", "solution": "def reverse_string(str):\n    result = ''\n    for i in str:\n        result = i + result\n\n    return result"}
{"task_id": "codeeval-47", "solution": "class Vector():\n\n    def __init__(self, *args):\n        self._data = list(args)\n\n    def __getitem__(self, key):\n        try:\n            return self._data[key]\n        except TypeError:\n            return self._data[slice(key, None)]\n\n    def __str__(self):\n        return str(self._data)"}
{"task_id": "codeeval-48", "solution": ""}
{"task_id": "codeeval-49", "solution": "from random import randint\n\ndef random_element(iterable):\n    return iterable[randint(0, len(iterable) - 1)]"}
{"task_id": "codeeval-50", "solution": ""}
{"task_id": "codeeval-51", "solution": ""}
{"task_id": "codeeval-52", "solution": ""}
{"task_id": "codeeval-53", "solution": ""}
{"task_id": "codeeval-54", "solution": "class Vector3d:\n    def __new__(cls, x, y, z):\n        return super(Vector3d, cls).__new__(cls)\n\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __repr__(self):\n        return f'Vector3d({self.x}, {self.y}, {self.z})'\n\n    def __add__(self, other):\n        return Vector3d(self.x + other.x, self.y + other.y, self.z + other.z)\n\n    def __iadd__(self, other):\n        self.x += other.x\n        self.y += other.y\n        self.z += other.z\n        return self\n\n    def __sub__(self, other):\n        return Vector3d(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def __rsub__(self, other):\n        return Vector3d(other.x - self.x, other.y - self.y, other.z - self.z)\n\n    def __mul__(self, other):\n        return Vector3d(self.x * other, self.y * other, self.z * other)\n\n    def __rmul__(self, other):\n        return Vector3d(other * self.x, other * self.y, other * self.z)\n\n    def __neg__(self):\n        return Vector3d(-self.x, -self.y, -self.z)\n\n    def __pos__(self):\n        return self"}
{"task_id": "codeeval-55", "solution": "class Sentence:\n    def __init__(self, words):\n        self.words = words\n        self.index = 0\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.index < len(self.words):\n            value = self.words[self.index]\n            self.index += 1\n            return value\n        else:\n            raise StopIteration"}
{"task_id": "codeeval-56", "solution": ""}
{"task_id": "codeeval-57", "solution": "for f in function_list:\n\nwith decimal_context():"}
{"task_id": "codeeval-58", "solution": ""}
{"task_id": "codeeval-59", "solution": "async def count_words(text):\n    return await concurrent.gather(*[asyncio.create_task(task) for task in (text.split() for text in text.split('.'))])"}
{"task_id": "codeeval-60", "solution": ""}
{"task_id": "codeeval-61", "solution": "def find_largest_n_elements(nums, n):\n    nums.sort()\n    return nums[-n:]"}
{"task_id": "codeeval-62", "solution": "## Chapter 13## Introduction to Python Data Structures"}
{"task_id": "codeeval-63", "solution": "def count_element(lst, e):\n    return lst.count(e)"}
{"task_id": "codeeval-64", "solution": ""}
{"task_id": "codeeval-65", "solution": ""}
{"task_id": "codeeval-66", "solution": ""}
{"task_id": "codeeval-67", "solution": ""}
{"task_id": "codeeval-68", "solution": ""}
{"task_id": "codeeval-69", "solution": "def __init__(self, length, width):\nself.length = length\nself.width = width\n\ndef __str__(self):\nreturn f'{self.__class__.__name__}(length={self.length}, width={self.width})"}
{"task_id": "codeeval-70", "solution": "def __init__(self, x, y):\n    \"\"\"\n    Create a Vector2d instance with x and y components.\n    \"\"\"\n    self.x = x\n    self.y = y\n\ndef __repr__(self):\n    \"\"\"\n    Represent Vector2d in a readable format for debugging.\n    \"\"\"\n    return \"Vector2d(x={0}, y={1})\".format(self.x, self.y)\n\ndef __add__(self, other):\n    \"\"\"\n    Add two vectors together.\n    \"\"\"\n    return Vector2d(self.x + other.x, self.y + other.y)\n\ndef __mul__(self, scalar):\n    \"\"\"\n    Multiply a Vector2d instance with a scalar.\n    \"\"\"\n    return Vector2d(self.x * scalar, self.y * scalar)\n\ndef __eq__(self, other):\n    \"\"\"\n    Test for equality between two Vector2d instances.\n    \"\"\"\n    return self.x == other.x and self.y == other.y\n\ndef __ne__(self, other):\n    \"\"\"\n    Test for inequality between two Vector2d instances.\n    \"\"\"\n    return not self == other"}
{"task_id": "codeeval-71", "solution": "def get_last_element(g):\n    return g.next()"}
{"task_id": "codeeval-72", "solution": "def every_other_element(lst):\n    \"\"\"Returns a shallow-copied list containing every other element of the given list, starting with the first element.\"\"\"\n    return [lst[i] for i in range(0, len(lst), 2)]"}
{"task_id": "codeeval-73", "solution": "def sort_by_length(list):\n    n = 0\n    for i in range(0, len(list)):\n        for j in range(i + 1, len(list)):\n            if len(list[i]) > len(list[j]):\n                list[i], list[j] = list[j], list[i]\n                n += 1\n    return n"}
{"task_id": "codeeval-74", "solution": ""}
{"task_id": "codeeval-75", "solution": "import asyncio\n\nasync def process_single_sentence(sentence: str, location: int) -> dict:\n    \"\"\"\n    Takes a sentence and returns a dictionary of location and number of words.\n    \"\"\"\n    words = sentence.split()\n    return {'location': location, 'words': len(words)}\n\nasync def process_many_sentences(sentences: list) -> None:\n    \"\"\"\n    Calls the awaitable process_single_sentence for each sentence in the list.\n    Yields results from awaitables in the order as they were completed, i.e.\n    in the order of the sentence they correspond to.\n    \"\"\"\n    for sentence, location in zip(sentences, range(len(sentences))):\n        result = await process_single_sentence(sentence, location)\n        yield result"}
{"task_id": "codeeval-76", "solution": "def running_sum(list_of_numbers):\n    sum = 0\n    for num in list_of_numbers:\n        sum += num\n        yield sum"}
{"task_id": "codeeval-77", "solution": ""}
{"task_id": "codeeval-78", "solution": "class User():\n    def __init__(self, handle, name):\n        self.handle = handle\n        self.name = name"}
{"task_id": "codeeval-79", "solution": "def merge_dictionaries(d1, d2):\n    \"\"\"Return a merged dictionary with the same keys as d1, with the values from d2.\"\"\"\n    result = {}\n    for key in d1.keys():\n        result[key] = d1[key]\n    for key in d2.keys():\n        if key not in d1.keys():\n            result[key] = d2[key]\n    return result"}
{"task_id": "codeeval-80", "solution": ""}
{"task_id": "codeeval-81", "solution": ""}
{"task_id": "codeeval-82", "solution": ""}
{"task_id": "codeeval-83", "solution": "def word_generator(sentence):\n    words = sentence.split()\n        for word in words:\n            yield word"}
{"task_id": "codeeval-84", "solution": "class Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Vector2D(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector2D(self.x - other.x, self.y - other.y)"}
{"task_id": "codeeval-85", "solution": ""}
{"task_id": "codeeval-86", "solution": ""}
{"task_id": "codeeval-87", "solution": "class BankAccount:\n    def __init__(self, initial_balance=0):\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if self.balance < amount:\n            raise InsufficientFundsError(f\"Insufficient funds. Balance: {self.balance}, Amount: {amount}\")\n        self.balance -= amount\n\n    def __str__(self):\n        return f\"Balance: {self.balance}\"\n\nclass InsufficientFundsError(Exception):\n    def __init__(self, message):\n        self.message = message"}
{"task_id": "codeeval-88", "solution": ""}
{"task_id": "codeeval-89", "solution": "class Pet:\n    def __init__(self, name):\n        self.name = name\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, value):\n        self._name = value\n    \n    @staticmethod\n    def factory(pet_type, name):\n    if pet_type == \"dog\":\n        return Dog(name)\n    elif pet_type == \"cat\":\n        return Cat(name)\n    else:\n        raise ValueError(\"Unknown pet type\")\n\n\nclass Dog(Pet):\n    def __init__(self, name):\n        super().__init__(name)\n\n\nclass Cat(Pet):\n    def __init__(self, name):\n        super().__init__(name)"}
{"task_id": "codeeval-90", "solution": ""}
{"task_id": "codeeval-91", "solution": ""}
{"task_id": "codeeval-92", "solution": ""}
{"task_id": "codeeval-93", "solution": ""}
{"task_id": "codeeval-94", "solution": ""}
{"task_id": "codeeval-95", "solution": ""}
{"task_id": "codeeval-96", "solution": ""}
{"task_id": "codeeval-97", "solution": "class MethodAdder(type):\n\n    def __new__(mcls, name, bases, dct):\n        def hello(self):\n            print \"Hello from {}\".format(self.__class__.__name__)\n        dct[\"hello\"] = hello\n        return super(MethodAdder, mcls).__new__(mcls, name, bases, dct)"}
{"task_id": "codeeval-98", "solution": "from collections import defaultdict\n\nclass Singleton:\n    def __init__(self):\n        self.instances = defaultdict(dict)\n\n    def __call__(self, *args, **kwargs):\n        instance = self.instances.get(args[0], None)"}
{"task_id": "codeeval-99", "solution": "class JSONSerializableMixin:\n\n    @staticmethod\n    def from_json(json_data, json_class):\n        return json_class(**json.loads(json_data))\n\n    def to_json(self):\n        return json.dumps(self.__dict__)"}